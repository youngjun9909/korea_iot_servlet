package org.example.demo.servlet;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import org.example.demo.dao.UserDao;
import org.example.demo.model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/")
public class UserServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private UserDao userDao;

    public void init() {
        userDao = new UserDao();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getServletPath();

        try{
            switch (action) {
                case "/new":
                    showNewForm(request, response);
                    break;
                case "/insert":
                    insertUser(request, response);
                    break;
                case "/update":
                    updateUser(request, response);
                    break;
                case "/edit":
                    showEditForm(request, response);
                    break;
                case "/delete":
                    deleteUser(request, response);
                    break;
                default:
                    listUser(request, response);
                    break;
            }
        }catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }

    // 각 요청에 따른 로직 구현
    private void showNewForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        // 데이터 삽입을 위해 데이터 입력 받는 form 동작을 정의

        // RequestDispatcher :
        // : 요청을 특정 리소스 (JSP, 서블릿 등)로 전달하거나 포함시킬 때 사용하는 객체
        //>> 클라이언트 요청 리소스를 처리하는 역할을 위임
        RequestDispatcher dispatcher = request.getRequestDispatcher("/user/form.jsp");

        // .forward()
        // : 클라이언트의 요청과 응답을 지정된 JSP 페이지로 전달
        dispatcher.forward(request, response);
    }

    private void insertUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String country = request.getParameter("country");

        User newUser = new User(0, name, email, country);
        userDao.insertUser(newUser);
        response.sendRedirect("list"); // 응답 후 list 경로로 리다이렉트하여 목록을 다시 표시
    }

    private void updateUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String country = request.getParameter("country");

        User user = new User(id, name, email, country);
        userDao.updateUser(user);
        response.sendRedirect("list");
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response) throws
            ServletException, IOException,SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        User existingUser =  userDao.selectUser(id);
        RequestDispatcher dispatcher = request.getRequestDispatcher("/user/form.jsp");
        request.setAttribute("user",existingUser);
        dispatcher.forward(request,response);

    }

    private void deleteUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        userDao.deleteUser(id);
        response.sendRedirect("list");
    }

    private void listUser(HttpServletRequest request, HttpServletResponse response) throws
            ServletException, IOException, SQLException {
        List<User> listUser = userDao.selectAllUsers();
        request.setAttribute("name",listUser);
        request.setAttribute("listUser",listUser);
        //해당 페이지로  요청 데이터로 이동
        RequestDispatcher dispatcher =request.getRequestDispatcher("/user/list.jsp");

        dispatcher.forward(request,response);
    }
}